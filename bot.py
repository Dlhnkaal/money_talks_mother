from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import asyncio
from config import BOT_TOKEN, CHANNEL_USERNAME
from payment import create_payment
from aiohttp import web
import os

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π üöÄ")

@dp.message(Command("create_giveaway"))
async def cmd_create_giveaway(message: types.Message):
    await message.answer("–ü–æ–∫–∞ —Å–æ–∑–¥–∞—ë–º –≤—Ä—É—á–Ω—É—é (–≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ –¥–æ–±–∞–≤–∏–º —Ñ–æ—Ä–º—É).")

@dp.message(Command("post_giveaway"))
async def cmd_post_giveaway(message: types.Message):
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data="join_giveaway")]
    ])
    await bot.send_message(chat_id=CHANNEL_USERNAME, text="üéÅ –ù–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à! –ñ–º–∏ '–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å' üëá", reply_markup=kb)

@dp.callback_query(lambda c: c.data == "join_giveaway")
async def process_join(call: types.CallbackQuery):
    amount = 500  # —Ç–µ—Å—Ç–æ–≤–∞—è —Å—É–º–º–∞
    payment = create_payment(amount, call.from_user.id)
    url = payment.confirmation.confirmation_url

    # === –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –ë–î ===
    import asyncpg
    from config import DATABASE_URL

    giveaway_id = 1  # –ø–æ–∫–∞ –≤—Ä—É—á–Ω—É—é (–ø–µ—Ä–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à), –ø–æ—Ç–æ–º —Å–¥–µ–ª–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º

    conn = await asyncpg.connect(DATABASE_URL)

    # –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —É—á–∞—Å—Ç–Ω–∏–∫
    exists = await conn.fetchval(
        "SELECT COUNT(*) FROM participants WHERE user_id = $1 AND giveaway_id = $2",
        call.from_user.id, giveaway_id
    )

    if exists == 0:
        await conn.execute(
            "INSERT INTO participants (user_id, giveaway_id, paid) VALUES ($1, $2, $3)",
            call.from_user.id, giveaway_id, False
        )
        await bot.send_message(chat_id=call.from_user.id, text="‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!")
    else:
        await bot.send_message(chat_id=call.from_user.id, text="‚ö†Ô∏è –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ.")

    await conn.close()

    # === –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É ===
    await bot.send_message(chat_id=call.from_user.id, text=f"–û–ø–ª–∞—Ç–∏ —É—á–∞—Å—Ç–∏–µ: {url}")

    await call.answer()

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ + —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
async def start_bot():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(dp.start_polling(bot))
    
    # –§–∏–∫—Ç–∏–≤–Ω—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
    async def handle(request):
        return web.Response(text="Bot is running!")

    app = web.Application()
    app.router.add_get("/", handle)

    port = int(os.environ.get("PORT", 10000))  # Render –∑–∞–¥–∞—Å—Ç PORT, –∏–Ω–∞—á–µ 10000
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()

    print(f"‚úÖ Web server started on port {port}")

    # –ß—Ç–æ–±—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª—Å—è
    while True:
        await asyncio.sleep(3600)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    asyncio.run(start_bot())
