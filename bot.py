import logging
import os
import asyncio
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, Update
from aiogram.webhook.aiohttp_server import SimpleRequestHandler
from aiohttp import web
from config import BOT_TOKEN, RENDER_DOMAIN, PORT

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# === –ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ===
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Webhook!")

# === Telegram Request Handler ===
class MyWebhookRequestHandler(SimpleRequestHandler):
    async def handle(self, request: web.Request):
        update = await request.json()
        telegram_update = Update(**update)
        await self.dispatcher.feed_update(bot=self.bot, update=telegram_update)
        return web.Response(text="OK")

# === –¢–µ—Å—Ç–æ–≤—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã ===
async def index(request):
    return web.Response(text="ü§ñ Bot is running! Use /ping to test.")

async def ping(request):
    return web.Response(text="üèì Pong!")

async def handle_404(request):
    return web.Response(text="üö´ Not Found", status=404)

async def main():
    # 1. –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = web.Application()
    
    # 2. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
    app.router.add_get("/", index)
    app.router.add_get("/ping", ping)
    
    # 3. –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è –≤–µ–±—Ö—É–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å–µ–∫—Ä–µ—Ç–Ω—É—é —á–∞—Å—Ç—å —Ç–æ–∫–µ–Ω–∞)
    secret_path = BOT_TOKEN.split(':')[1]  # –ë–µ—Ä–µ–º —á–∞—Å—Ç—å –ø–æ—Å–ª–µ ':'
    webhook_path = f"/{secret_path}"
    logger.info(f"Webhook path: {webhook_path}")

    # 4. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–µ–±—Ö—É–∫–∞
    MyWebhookRequestHandler(bot=bot, dispatcher=dp).register(app, path=webhook_path)
    
    # 5. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è 404 –æ—à–∏–±–æ–∫
    app.router.add_route("*", "/{tail:.*}", handle_404)

    # 6. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    runner = web.AppRunner(app)
    await runner.setup()
    
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()
    logger.info(f"‚úÖ Web server started on port {PORT}")

    # 7. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    webhook_url = f"https://{RENDER_DOMAIN}{webhook_path}"
    logger.info(f"Setting webhook to {webhook_url}")
    
    try:
        await bot.set_webhook(webhook_url)
        logger.info("‚úÖ Webhook set successfully")
    except Exception as e:
        logger.error(f"‚ùå Failed to set webhook: {e}")
        raise

    # 8. –î–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º
    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())
